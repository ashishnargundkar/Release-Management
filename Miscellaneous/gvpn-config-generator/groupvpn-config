#!/usr/bin/env python
"""Generate configuration files for GroupVPN.

The configuration data is written to stdout and the ejabberdctl commands
are written to stderr. The ejabberdctl commands can be executed by
specifying --configure.
"""
from __future__ import print_function
import argparse
import io
import itertools
import json
import math
import os.path as path
import random
import re
import string
import subprocess
import sys
import zipfile

import ipaddress

PASSWORD_CHARS = string.ascii_lowercase + string.digits


call_count = 0
success_count = 0
def call(command):
    global call_count, success_count
    call_count += 1
    try:
        subprocess.check_call(command)
    except (subprocess.CalledProcessError, OSError) as e:
        print(e, file=sys.stderr)
    else:
        success_count += 1

def group_name(s):
    if not re.match(r'^\w+$', s):
        raise ValueError
    return s

def ip_network_from_str(s):
    # The ipaddress module only accepts unicode objects, so we have to decode
    # the string that comes in on the command line.
    return ipaddress.ip_network(s.decode())


# Parse command line
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('group_name', type=group_name)
parser.add_argument('xmpp_host')
parser.add_argument('machine_count', type=int)
parser.add_argument('--configure', action='store_true',
                    help="Execute ejabberdctl commands (default: just print "
                         "them)")
parser.add_argument('--ip-network', type=ip_network_from_str, required=False,
                    default=ipaddress.ip_network(u'172.31.0.0/24'),
                    help="IP network for the group (default: 172.31.0.0/24)")
parser.add_argument('--no-encryption', dest='encryption', action='store_false',
                    help="Don't configure for end-to-end encryption")
parser.add_argument('--password-length', default=30, type=int,
                    help="length of generated XMPP passwords (default: 30)")
parser.add_argument('--seed',
                    help="Seed the random number generator")
parser.add_argument('--sudo', action="store_true",
                    help="Use sudo when calling ejabberdctl")
parser.add_argument('--version', action='version', version='1')
parser.add_argument('--zip', action='store_true',
                    help="Package configs in a zip archive (still written to "
                         "stdout)")
args = parser.parse_args()


# Generate configuration data
if args.seed:
    random.seed(args.seed)

max_digits = int(math.log10(max(1, args.machine_count))) + 1
username_template = "%s_{:0%d}" % (args.group_name, max_digits)

with open(path.join(path.dirname(__file__), 'defaults.json')) as f:
    defaults = json.load(f)

configs = []
for n, ip in zip(range(1, args.machine_count + 1), args.ip_network.hosts()):
    username = username_template.format(n)
    password = ''.join(random.choice(PASSWORD_CHARS)
                       for _ in range(args.password_length))
    data = defaults.copy()
    data.update({
        'ip4': str(ip),
        'ip4_mask': args.ip_network.prefixlen,
        'xmpp_username_short': username,
        'xmpp_username': '%s@%s' % (username, args.xmpp_host),
        'xmpp_password': password,
        'xmpp_host': args.xmpp_host,
        'sec': args.encryption,
    })
    configs.append({'filename': "%s.json" % username, 'data': data})


# Print ejabberdctl commands to stderr
for config in configs:
    command = [
        'ejabberdctl',
        'register',
        config['data']['xmpp_username_short'],
        args.xmpp_host,
        config['data']['xmpp_password'],
    ]
    if args.sudo:
        command.insert(0, 'sudo')
    print(' '.join(command), file=sys.stderr)
    if args.configure:
        call(command)

for c1, c2 in itertools.permutations(configs, 2):
    usernames = [c['data']['xmpp_username_short'] for c in [c1, c2]]
    nick = '%s-%s' % tuple(usernames)
    group = 'groupvpn'
    subscription = 'both'
    command = [
        'ejabberdctl',
        'add-rosteritem',
        usernames[0],
        args.xmpp_host,
        usernames[1],
        args.xmpp_host,
        nick,
        group,
        subscription
    ]
    if args.sudo:
        command.insert(0, 'sudo')
    print(' '.join(command), file=sys.stderr)
    if args.configure:
        call(command)

if args.configure:
    print("CONFIGURE SUMMARY: %s of %s commands completed successfully"
          "" % (success_count, call_count), file=sys.stderr)


# Print configuration data to stdout
if args.zip:
    b = io.BytesIO()
    with io.BytesIO() as b:
        with zipfile.ZipFile(b, 'w') as z:
            for config in configs:
                z.writestr(config['filename'],
                           json.dumps(config['data'], indent=4) + '\n')
        b.seek(0)
        print(b.read())
else:
    for config in configs:
        print(json.dumps(config['data'], indent=4))
