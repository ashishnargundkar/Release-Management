#!/bin/bash

CONTROLLER_BINARY_URL=https://github.com/ipop-project/Downloads/releases/download/v16.01.0/ipop-v16.01.0_ubuntu.tar.gz
CONTROLLER_BINARY_NAME=ipop-v16.01.0_ubuntu.tar.gz
CONTROLLER_BINARY_MD5=bd5e58a94ea2ececbfd57c5d9de13ab2

INSTALLATION_DIR=/opt/ipop

cat /etc/issue | grep Ubuntu > /dev/null && is_ubuntu=true

read -r -d '' GVPN_CONF <<EOT
{
    "CFx": {
        "xmpp_username": "%XMPP_USERNAME%",
        "xmpp_password": "%XMPP_PASSWORD%",
        "xmpp_host": "%XMPP_HOST%",
        "tincan_logging": 0,
        "vpn_type": "GroupVPN",
        "ip4_mask": 16
    },
        "Logger": {
        "controller_logging": "ERROR"
    },
        "TincanDispatcher": {
        "dependencies": ["Logger"]
    },
        "TincanListener" : {
        "socket_read_wait_time": 15,
        "dependencies": ["Logger", "TincanDispatcher"]
    },
        "TincanSender": {
        "switchmode": 0,
        "dependencies": ["Logger"]
    },
        "BaseTopologyManager": {
        "ip4": "%IP4%",
        "sec": true,
        "multihop": false,
        "num_successors": 8,
        "num_chords": 8,
        "num_on_demand": 20,
        "num_inbound": 40,
        "ttl_link_initial": 60,
        "ttl_link_pulse": 30,
        "ttl_chord": 180,
        "ttl_on_demand": 6000,
        "threshold_on_demand": 128,
        "timer_interval": 1,
        "interval_management": 15,
        "use_central_visualizer": false,
        "interval_central_visualizer": 5,
        "dependencies": ["Logger"]
    },
        "LinkManager": {
        "dependencies": ["Logger"]
    },
        "StatReport": {
        "enabled": %STAT_REPORT_BOOLEAN%,
        "stat_server": "metrics.ipop-project.org",
        "stat_server_port": 8080,
        "timer_interval": 200
    },
        "CentralVisualizer": {
        "enabled": false,
        "central_visualizer_addr": "",
        "central_visualizer_port": 51234,
        "dependencies": ["Logger"]
    }
}
EOT

read -r -d '' SVPN_CONF <<EOT
{
    "CFx": {
        "xmpp_username": "%XMPP_USERNAME%",
        "xmpp_password": "%XMPP_PASSWORD%",
        "xmpp_host": "%XMPP_HOST%",
        "tincan_logging": 0,
        "vpn_type": "SocialVPN",
        "ip4_mask": 24
    },
    "Logger": {
        "controller_logging": "ERROR"
    },
    "TincanDispatcher": {
        "dependencies": ["Logger"]
    },
	"TincanListener" : {
        "socket_read_wait_time": 15,
        "dependencies": ["Logger", "TincanDispatcher"]
    },
    "TincanSender": {
        "dependencies": ["Logger"]
    },
    "Monitor": {
        "trigger_con_wait_time": 120,
        "dependencies": ["Logger"]
    },
    "BaseTopologyManager": {
        "link_trimmer_wait_time": 30,
        "on-demand_connection": false,
        "on-demand_inactive_timeout": 600,
        "multihop": false,
        "sec": true,
        "timer_interval": 15,
        "dependencies": ["Logger"]
    },
    "LinkManager": {
        "dependencies": ["Logger"]
    },
    "AddressMapper": {
        "ip4": "%IP4%",
        "dependencies": ["Logger"]
    },
    "Watchdog": {
        "timer_interval": 10,
        "dependencies": ["Logger"]
    },
    "StatReport": {
        "enabled": %STAT_REPORT_BOOLEAN%,
        "stat_server": "metrics.ipop-project.org",
        "stat_server_port": 8080,
        "timer_interval": 200
    }
}
EOT

MSG_GENERAL_NEED_ROOT="Run with Root Privilege"
MSG_INSTALL_CONTROLLER_CHECKSUM_FAILED="Controller Checksum Failed"
MSG_INSTALL_INSTALLATION_FAILED="Installation Failed"
MSG_INSTALL_INSTALLED_SUCCESSFULLY="Installed"
MSG_CONFIG_OVERWRITE="IPOP already Configured. Do you want to overwrite it? [y/N] "
MSG_CONFIG_CFGTYPE="Which configuration do you want to install?
 1) Group VPN
 2) Social VPN
Choose 1 or 2: "
MSG_CONFIG_XMPP_HOST="xmpp_host?
Enter xmpp_host: "
MSG_CONFIG_XMPP_USERNAME="xmpp_username?
Enter xmpp_username (ex. YOURUSERNAME@ejabberd): "
MSG_CONFIG_XMPP_PASSWORD="xmpp_password?
Enter xmpp_password: "
MSG_CONFIG_IP4="ip4?
Enter ip4 (ex. 192.168.5.1): "
MSG_STAT_REPORT="Status Report On?
IPOP is an openSource project. Setting the status report on, helps us show our financial supporters the actual number of our users and get more support from them. We don't collect any sensitive information and this is absolutely unharmful for users.
Enter [y|N]: "
MSG_CONFIG_CONFIGURED_SUCCESSFULLY="Configured Successfully"
MSG_START_SUCCESS="Started"
MSG_STOP_SUCCESS="Stopped"

function prompt(){
	retvar=$1
	regex="$2"
	msg="$3"
	retval=""

	if [ "$regex" == "ip4" ]; then
		rx='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'
		regex="$rx\.$rx\.$rx\.$rx"
	fi
	regex="^$regex$"
	while [[ ! $retval =~ $regex ]]; do
		echo
		echo -n "$msg"
		read retval
	done
	eval "$retvar=$retval"
}

function set_state(){
	state=$1
	echo "$state" > installer.stat
}

function get_state(){
	cat installer.stat 2>/dev/null
}

function i_am_root(){
	return $EUID
}
function force_root(){
	if ! i_am_root; then
		echo "$MSG_GENERAL_NEED_ROOT"
		exit 5
	fi
}

action=$1
case "$action" in
	install)
		force_root

		mkdir -p "$INSTALLATION_DIR" 2>/dev/null
		cd "$INSTALLATION_DIR"

		if [ "$is_ubuntu" = true ]; then
			if ! (apt-get update && apt-get install -y psmisc wget ca-certificates python) ; then
				echo "$MSG_INSTALL_INSTALLATION_FAILED"
				exit 4
			fi
		fi

		wget -O "$CONTROLLER_BINARY_NAME" "$CONTROLLER_BINARY_URL" && tar xvzf "$CONTROLLER_BINARY_NAME"
		if [ "$(md5sum $CONTROLLER_BINARY_NAME | awk '{print $1}')" != "$CONTROLLER_BINARY_MD5" ]; then
			echo $MSG_INSTALL_CONTROLLER_CHECKSUM_FAILED
			exit 3
		fi

		if [ ! -e /dev/net/tun ]; then
			mkdir /dev/net
			mknod /dev/net/tun c 10 200
			chmod 666 /dev/net/tun
		fi

		set_state installed
		echo "$MSG_INSTALL_INSTALLED_SUCCESSFULLY"
		exit 0
		;;

	config)
		if [ -f "config.json" ]; then
			prompt overwrite_config ".*" "$MSG_CONFIG_OVERWRITE"
			if [ "$overwrite_config" != "y" ]; then
				exit 2
			fi
		fi
		prompt vpn_type "[1-2]" "$MSG_CONFIG_CFGTYPE"
		prompt xmpp_host "ip4" "$MSG_CONFIG_XMPP_HOST"
		prompt xmpp_username "[0-9a-zA-Z_.@-]+" "$MSG_CONFIG_XMPP_USERNAME"
		prompt xmpp_password ".+" "$MSG_CONFIG_XMPP_PASSWORD"
		prompt ip4 "ip4" "$MSG_CONFIG_IP4"
		prompt stat_report "[y|Y|n|N]" "$MSG_STAT_REPORT"

		if [ $stat_report == "y" ] || [ $stat_report == "Y" ]; then
			STAT_REPORT_BOOLEAN="true"
		else
			STAT_REPORT_BOOLEAN="false"	
		fi

		if [ $vpn_type -eq 1 ]; then
			CONF="$GVPN_CONF"
		else
			CONF="$SVPN_CONF"
		fi

		cd "${INSTALLATION_DIR}"
		[ -d config ] || mkdir config
		CONF_FILE="config/config.json"

		echo "$CONF" |
			sed "s~%XMPP_HOST%~$xmpp_host~g" |
			sed "s~%XMPP_USERNAME%~$xmpp_username~g" |
			sed "s~%XMPP_PASSWORD%~$xmpp_password~g" |
			sed "s~%IP4%~$ip4~g" |
			sed "s~%STAT_REPORT_BOOLEAN%~$STAT_REPORT_BOOLEAN~g" > "$CONF_FILE"

		echo "$MSG_CONFIG_CONFIGURED_SUCCESSFULLY"
		;;

	start)
		force_root
		cd "$INSTALLATION_DIR"
		[ -d log ] || mkdir log
		sh -c './ipop-tincan 1> log/out.log 2> log/err.log &'
		python -m controller.Controller -c config/config.json &> log/log.txt &
		echo "$MSG_START_SUCCESS"
		exit 0
		;;

	stop)
		force_root
		ps aux | grep -v grep | grep ipop-tincan | awk '{print $2}' | xargs sudo kill -9
		ps aux | grep -v grep | grep controller.Controller | awk '{print $2}' | xargs sudo kill -9
		echo "$MSG_STOP_SUCCESS"
		exit 0
		;;

	status)
		echo -e '\x02\x01{"m":"get_state"}' | netcat -q 1 -u 127.0.0.1 5800
		;;

	*)
		echo "Usage: $SCRIPTNAME {install|config|start|stop|status}" >&2
		exit 3
		;;
esac
